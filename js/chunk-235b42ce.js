(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-235b42ce"],{"4baf":function(e,t,a){},"4d27":function(e,t,a){},8786:function(e,t,a){"use strict";var n=a("4d27"),c=a.n(n);c.a},dc91:function(e,t,a){"use strict";a.r(t);var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"wz-page"},[a("articleheader",{attrs:{data:e.artheader}}),a("p",[e._v("关于缓存的看法,我在CSDN发问,看到回复后发现缓存其实一直没搞懂过.下文是sp1234的回复")]),a("p",[e._v("1.对你自己的系统设计来说，缓存跟进程中的 Dictionary<string, .....> 有什么区别呢？")]),a("p",[e._v("2.照你这个逻辑来看，你认为的缓存就是")]),a("pre",[e._v("public static DataTable 用户表;\npublic static DataTable 角色表;\npublic static DataTable 权限表;\npublic static DataTable 部门表;\n之类的了？！\n")]),a("p",[e._v("\n            3.缓存，本质上都是 key-value 形式。不论你说的那一种，都是 k-v 形式，而不是什么“把数据库里的数据读到内存的 DataTable 对象里边”的概念。\n            比如说这个 csdn 论坛，可能会缓存每一个板块的目录列表第一页，那么当有10000 个访问来查询的时候，直接取出这个有着50个帖子标题的查询结果列表，这就是缓存。而当帖子有改变（比如说回帖）的时候，缓存被自动清理掉，那么第 10001个请求时就会自动重建缓存。因此这个查询类似于\n        ")]),a("pre",[e._v('public List<帖子标题> 查询页面(string 论坛, int 页号)\n{\n    var key = $"查询{论坛}板块第{页号}的帖子标题列表";\n    var cache = HttpRuntime.Cache;\n    var result = (List<帖子标题>)cache[key];\n    if (result == null)\n    {\n        result = 查询数据库查询页面(论坛, 页号);\n        cache.Insert(key, result);  //这里的第三个 Dependency 参数其实才是 Cache 技术的核心技术。这里为了举例编程入门知识，暂时忽略。\n    }\n    return result;\n}\n')]),a("p",[e._v("\n            缓存里的存储的，是针对一次查询（例如一个 sql 语句，或者一个业务参数描述）为 key而得到的结果，而并不是什么把整个数据库拷贝出来作为 DataTable。比如说 csdn 有10亿个帖子，那么“.net 论坛的第1页”为 key 的缓存结果中就只有第一页的这几十个帖子的标题。这才叫做缓存。\n            有的人把数据库里边所有数据copy出来叫做缓存，那么缓存里几乎所有数据都是垃圾数据了，缓存命中率几乎为0。这样的根本不是缓存技术，而是滥用缓存概念。\n        ")]),a("p",[e._v("\n            4.而使用什么 Redis 之类的外部数据库，那不过就是拿一个免费的内存 k-v 数据库来共享使用，并没有什么特别的技术。显然要付出网络 I/O 和数据序列化/反序列化的代价，这是其问题。但是不论那采用 .net 框架中高效率功能强大的 Cache，还是采用一种外部的内存 k-v 数据库，本质上你都是 k-v 方式的。\n            如果你认为缓存就是把整个数据库内容拷贝来拷贝去地，那么应该说，这样的设计离缓存的距离还很远。\n        ")]),a("p",[e._v("\n            5.如果说一个公司的技术主管嫌员工不愿意学习、不去真正设计和编写缓存程序，所以才用 memcached 或者 redis 之类的 key-value 数据库来强迫这些人来改变自己的思维方式，那么我可以理解。否则当然是要先学会用 .net 框架现成的、本地的东西设计为好。\n            不论用什么，搞懂缓存的技术机制而不是纠结具体的工具。那样即使你不去强迫自己用什么时髦的框架，你也能理解缓存技术。\n        ")]),a("p",[e._v("\n            6.缓存是从业务出发，使用业务命令为key参数，把查询结果放到 key-value 形式内存数据库中（我们把本地进程内 Cache 数据结构也叫做一个数据库）。缓存系统有着极高的命中率，命中率是个核心概念。\n            一旦基础数据改变，那么缓存中的响应结果就是垃圾了。缓存系统就要一整套 CacheDepency 设计机制来自动化地清理缓存垃圾。所以缓存技术的核心在于缓存依赖项的设计，而并不是把数据存一下。缓存的核心技术在于及时准确地清理缓存，不懂如何清理缓存就不懂缓存技术。\n            如过你说缓存是整个数据库都读取到一个内存数据结构中（不管是进程内的组件还是一个免费的第三方内存数据库产品），那么你得到的大量脏数据来回拷贝的结果本身就不值得缓存了。缓存概念就成了标题党，技术的危害反而更大。\n        ")]),a("p",[e._v("\n            7.比如说，我们写一个程序要进行1千人的考试结果的判卷，那么前几个判卷工作进行中可能进行的一些查询工作的结果其实在后边的9百多个判卷中也很有可能重复使用，那么其实基于缓存来设计算法就能“自然而然地、无心插柳地”提高整体算法的效率。这就是先理解了缓存设计，然后使用相关的工具软件。\n            缓存设计的核心在于缓存数据的命中率。如果缓存中的数据都是垃圾，那就是极端失败的设计了。\n        ")]),a("p",[e._v("\n            8.缓存设计首先要要求你用 key-value 方式来设计，改变了你的模式。\n            有些大公司有钱，能用128G内存来承载一个内存数据库。但是一般的公司没有这个费用，而且其实也不必如此设计缓存的底层存储机制。\n            .net 的 Cache 机制可以自动根据内存物理使用情况而自动“遗忘”不常用的数据，CacheDependency 机制可以让你设置为你根据“时间、文件被变动、SqlCacheDepdency 通知、其它的 Cache 单元被写入数据”等事件来自动清理缓存垃圾。\n            这样你使用缓存的核心，就是从业务逻辑出发来研究各种查询的重复概率，然后使用好 k-v 形式的缓存机制。尽量提高提高缓存命中率，少用内存，才是真地用缓存。\n        ")])],1)},c=[],r=a("d225"),i=a("308d"),s=a("6bb5"),u=a("4e2b"),l=a("9ab4"),b=a("60a3"),p=a("dedd"),v=function(e){function t(){return Object(r["a"])(this,t),Object(i["a"])(this,Object(s["a"])(t).apply(this,arguments))}return Object(u["a"])(t,e),t}(b["c"]);l["a"]([Object(b["b"])()],v.prototype,"artheader",void 0),v=l["a"]([Object(b["a"])({components:{articleheader:p["a"]}})],v);var d=v,o=d,h=(a("e1df"),a("2877")),_=Object(h["a"])(o,n,c,!1,null,"3c74b39e",null);t["default"]=_.exports},dedd:function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",[a("h1",{staticClass:"text-center"},[e._v(e._s(e.data.title))]),a("h5",[e._v("\n        作者: \n        "),a("span",[e._v(e._s(e.data.author))])]),a("h5",[e._v("\n        日期: \n        "),a("span",[e._v(e._s(e.data.date))])]),a("a",{staticClass:"btn link backbtn",on:{click:function(t){return e.goback()}}},[e._v("返回上页")]),a("hr",{staticClass:"line"})])},c=[],r=a("d225"),i=a("b0b4"),s=a("308d"),u=a("6bb5"),l=a("4e2b"),b=a("9ab4"),p=a("60a3"),v=function(e){function t(){return Object(r["a"])(this,t),Object(s["a"])(this,Object(u["a"])(t).apply(this,arguments))}return Object(l["a"])(t,e),Object(i["a"])(t,[{key:"goback",value:function(){this.$router.go(-1)}}]),t}(p["c"]);b["a"]([Object(p["b"])()],v.prototype,"data",void 0),v=b["a"]([p["a"]],v);var d=v,o=d,h=(a("8786"),a("2877")),_=Object(h["a"])(o,n,c,!1,null,"4d0669a8",null);t["a"]=_.exports},e1df:function(e,t,a){"use strict";var n=a("4baf"),c=a.n(n);c.a}}]);